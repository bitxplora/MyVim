vim9script

set nocompatible              # be iMproved, required
filetype off                  # required

# Viminfo, the default is "viminfo='100,<50,s10,h" at ~/.viminfo
set viminfo="100,%,'50,h,s100,n~/.vim/viminfo

# set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

# Alternatively, pass a path where Vundle should install plugins
# call vundle#begin('~/some/path/here')

# let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

# Plugins
# Use release branch (recommended)
Plugin 'neoclide/coc.nvim', {'branch': 'release'}

Plugin 'scrooloose/nerdtree.git'
Plugin 'junegunn/fzf.vim'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'ryanoasis/vim-devicons'
Plugin 'nvie/vim-flake8'                    #PEP8 style checker
Plugin 'jiangmiao/auto-pairs'
Plugin 'tmhedberg/SimpylFold'
Plugin 'tpope/vim-surround'                 #The plugin provides mappings to easily delete, change and add such surroundings in pairs.
Plugin 'tpope/vim-commentary'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'  #To toggle between absolute and relative number
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-repeat'                   #Repeat.vim remaps . in a way that plugins can tap into it.
Plugin 'sumnerevans/vim-listtrans'          #This plugin toggles a sentence separated by , or ; to a list.
Plugin 'vim-airline/vim-airline'            #required powerline fonts, sudo apt install powerline sudo apt-get install fonts-powerline
Plugin 'vim-airline/vim-airline-themes'

# vimspector
Plugin 'puremourning/vimspector'

# Indent guides
Plugin 'preservim/vim-indent-guides'
#
# Ember - highlight and language support
Plugin 'leafgarland/typescript-vim'
#
# Plugin 'Quramy/vim-js-pretty-template'
Plugin 'joukevandermaas/vim-ember-hbs'

# Color preview
Plugin 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }

# boolean toggle tool
Plugin 'AndrewRadev/switch.vim'
Plugin 'gerazov/vim-toggle-bool'

# LSP
Plugin 'yegappan/lsp'

# All of your Plugins must be added before the following line
# required
call vundle#end()

filetype plugin indent on    # required

# To ignore plugin indent changes, instead use:
filetype plugin on

# Brief help
# :PluginList       - lists configured plugins
# :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
# :PluginSearch foo - searches for foo; append `!` to refresh local cache
# :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
#
# see :h vundle for more details or wiki for FAQ
# Put your non-Plugin stuff after this line
#
# Turn on backup option
set backup
#
# Where to store backup
set backupdir=~/.vim/backup//
#
# Make backup before overwritting the current buffer"
set writebackup
#
# Make a copy of the file and overwrite the original one
set backupcopy=yes
#
# Backup extension
set backupext=.bak

# Meaningfull backup name, ex: filename@2024-03-05T11:23.bak
autocmd BufWritePre * &bex = '@' .. strftime('%FT%H:%M') .. '.bak'


# Swapfile location
set directory=/var/tmp//

# NERDTree
map <C-n> :NERDTreeToggle<CR>


# VIM specific
# enable syntax highlighting
syntax enable

# show line numbers
set number relativenumber

# set tabs to have 2 spaces
set ts=2

#indent when moving to the next line while writing code
set autoindent
set smartindent
set cindent

#expand tabs into spaces
set expandtab

# To always display statusline
set laststatus=2

# Width of tab characters
set tabstop=2

#Search highlighting
set hlsearch
#
#Incremental search highlighting
set incsearch

# Menu option for enhanced mode of commands completion = wildmenu
set wildmenu

# when using the >> or << commands, shift lines by 2 spaces
set shiftwidth=2

# show a visual line under the cursor's current line
set cursorline

# show a visual vertical line on the cursor's current point
# set cursorcolumn

# Enabling session to save inaddition; resize for window line and columns,  and winpos for window position
set sessionoptions+=winpos,resize,options

# Enabling view to save inaddition to default, loccaloptions
set viewoptions+=localoptions

# Automatically create and load a view each time you open and exit buffer.
autocmd BufWinEnter *.* mkview
autocmd BufWinLeave *.* silent loadview

# show the matching part of the pair for [] {} and ()
set showmatch

# Show the mode you are on the last line.
set showmode

set encoding=UTF-8
set textwidth=79

set t_Co=256
syntax on
set background=dark
colorscheme distinguished
set termguicolors

# Spellcheck
# setlocal spell
setlocal spelllang=en_gb,en_us

# Words completion, use ctrl N or ctrl P in insert mode for word completion
set complete+=kspell

set spellfile=~/.vim/spell/en.utf-8.add

# To auto enable spell on txt file
augroup txtSpellCheck
    autocmd!
    autocmd FileType txt setlocal spell
    autocmd BufRead,BufNewFile *.txt setlocal spell
augroup END

#To enable auto insertion of skeleton on creation of .html file
# augroup skeleton
#     autocmd!
#     autocmd BufNewFile *.html 0r ~/.vim/skeletons/html
# augroup END

# use system clipboard
set clipboard=unnamed

# By default, Vim makes it difficult to create hidden buffers. To make Vim more liberal about hidden buffers
set hidden
#
# airline formatters  see https://github.com//vim-airline/vim-airline
g:airline#extensions#tabline#enabled = 1  # enable airline tabline
g:airline#extensions#tabline#formatter = 'unique_tail_improved'

# To put the statusline on the top of screen
# let g:airline_statusline_ontop = 1

# simplifying z section of tabline, a mimimal tabline
g:airline_section_z = airline#section#create('%3p%% %#__accent_bold#%4l%#__restore__#%#__accent_bold#/%L%#__restore__# %3v')

#Required powerline fonts, it can be installed via sudo apt install powerline and sudo apt-get install fonts-powerline
g:airline_powerline_fonts = 1
#
#Check up other theme at https:/github.com/vim-airline/vim-airlin/wiki/Screenshots
g:airline_theme = 'serene'
#
#jiangmiao/auto-pairs
g:AutoPairsFlyMode = 1
g:AutoPairsShortcutBackInsert = '<M-b>'
#
#indent-guides settings
#The default mapping to toggle the plugin is <Leader>ig.
#You can also use the following commands inside Vim:

#:IndentGuidesDisable
#:IndentGuidesToggle
#
#Enabling start indent guides by default
g:indent_guides_enable_on_vim_startup = 1
g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'text']
#
#Customising indent guides colors
# let g:indent_guides_auto_colors=0
# hi IndentGuidesOdd  ctermbg=black
# hi IndentGuidesEven ctermbg=darkgrey

g:indent_guides_start_level = 2
g:indent_guides_guide_size = 1
#
#
# Setting for color previewr Hexokinase
g:Hexokinase_highlighters = ['sign_column']   # sign-column is default, other are: virtual, background, foreground etc
g:Hexokinase_ftEnabled = ['css', 'html', 'javascript', 'typescript']  #This restricts the types it apply to, to those in list
#
#sumnerevans/vim-listtrans
nmap  ;l :call ListTrans_toggle_format()<CR>
xmap  ;l :call ListTrans_toggle_format('visual')<CR>
#
#vimspector mapping
#Installation of vimspector DAP gadgets
# let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools', 'CodeLLDB', 'vscode-bash-debug', 'vscode-js-debug', 'vscode-firefox-debug', 'debugger-for-chrome', 'java-debug-adapter', 'vscode-go' ]
# let g:vimspector_base_dir='~/.vim/bundle/vimspector'

# let g:vimspector_enable_mappings = 'HUMAN'
#
nnoremap <Leader>dl :call vimspector#Launch()<CR>
nnoremap <Leader>dx :call vimspector#Reset()<CR>
nnoremap <Leader>dr :call vimspector#Restart()<CR>

nnoremap <Leader>dc :call vimspector#Continue()<CR>
nnoremap <Leader>ds :call vimspector#Stop()<CR>

nnoremap <Leader>dso :call vimspector#StepOut()<CR>
nnoremap <Leader>dsi :call vimspector#StepInto()<CR>
nnoremap <Leader>dsv :call vimspector#StepOver()<CR>

nnoremap <Leader>dtb :call vimspector#ToggleBreakpoint()<CR>
nnoremap <Leader>dcb :call vimspector#ClearBreakpoints()<CR>

#command abbreviation of Vimspector Watch and Eval as vw for command on mode
cabbrev vw VimspectorWatch
cabbrev ve VimspectorEval

nnoremap <leader>rtc <Plug>VimspectorRunToCursor
nnoremap <leader>gtl <Plug>VimspectorGoToCurrentLine

# To make session e.g vms my_session_file
cabbrev vms VimspectorMkSession
#
# To load session e.g vls my_session_file
cabbrev vls VimspectorLoadSession

#Boolean toggle tool mapping to \t
nnoremap <silent> <leader>t :ToggleBool<CR>

set timeout ttimeoutlen=50
#
# TextEdit might fail if hidden is not set.
set hidden
#
# Give more space for displaying messages.
set cmdheight=4

# Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
# delays and poor user experience.
set updatetime=300

# Don't pass messages to |ins-completion-menu|.
set shortmess+=c

# Always show the signcolumn, otherwise it would shift the text each time
# diagnostics appear/become resolved.
set signcolumn=yes

# This snippet allows users to navigate through completion items in the popup menu using the <Tab> and <S-Tab> keys:
# When the popup menu is visible:
#   <Tab> will move to the next item in the list.
#   <S-Tab> will move to the previous item.
# When the popup menu is not visible:
#   <Tab> and <S-Tab> will perform their default actions (inserting a tab character).
# inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
# inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"



g:coc_global_extensions = [
  'coc-json',
  'coc-html',
  'coc-css',
  'coc-tsserver',
  'coc-prettier',
  'coc-eslint',
  'coc-highlight',
  'coc-vimlsp',
  'coc-sh',
  'coc-java',
  # 'coc-pyright',
  'coc-sql',
  'coc-swagger',
  'coc-xml',
  'coc-yaml',
  'coc-tailwindcss',
  'coc-ember',
  # 'coc-glint',
  ]


  # Use tab for trigger completion with characters ahead and navigate
  # NOTE: There's always complete item selected by default, you may want to enable
  # no select by `"suggest.noselect": true` in your configuration file
  # NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  # other plugin before putting this into your config
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  # Make <CR> to accept selected completion item or notify coc.nvim to format
  # <C-g>u breaks current undo, please make your own choice
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  # Use <c-space> to trigger completion
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  # Use `[g` and `]g` to navigate diagnostics
  # Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  # GoTo code navigation
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  # Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  # Highlight the symbol and its references when holding the cursor
  autocmd CursorHold * silent call CocActionAsync('highlight')

  # Symbol renaming
  nmap <leader>rn <Plug>(coc-rename)

  # Formatting selected code
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    # Setup formatexpr specified filetype(s)
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    # Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  # Applying code actions to the selected code block
  # Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  # Remap keys for applying code actions at the cursor position
  nmap <leader>ac  <Plug>(coc-codeaction-cursor)
  # Remap keys for apply code actions affect whole buffer
  nmap <leader>as  <Plug>(coc-codeaction-source)
  # Apply the most preferred quickfix action to fix diagnostic on the current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  # Remap keys for applying refactor code actions
  nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
  xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
  nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

  # Run the Code Lens action on the current line
  nmap <leader>cl  <Plug>(coc-codelens-action)

  # Map function and class text objects
  # NOTE: Requires 'textDocument.documentSymbol' support from the language server
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

# Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

# Use CTRL-S for selections ranges
# Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

# Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

# Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

# Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

# Add (Neo)Vim's native statusline support
# NOTE: Please see `:h coc-status` for integrations with external plugins that
# provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

# Mappings for CoCList
# Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
# Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
# Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
# Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
# Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
# Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
# Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
# Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


